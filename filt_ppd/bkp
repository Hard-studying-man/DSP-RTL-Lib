`define ROW    `P_DECIMATION
`define COL    `DIV(`P_COEFF_L, `P_DECIMATION)
`define MUL_W  (`P_INP_DATA_W+`P_COEFF_W)
`define ADD_W  (`P_INP_DATA_W+`P_COEFF_W+`P_DECIMATION)
`define SUM_W  (`P_INP_DATA_W+`P_COEFF_W+`P_DECIMATION+`DIV(`P_COEFF_L, `P_DECIMATION))

  //const int ROW = `P_DECIMATION;
  //const int COL =  `DIV(`P_COEFF_L, `P_DECIMATION);
  //const int MUL_W = `P_INP_DATA_W+`P_COEFF_W;
  //const int ADD_W = `P_INP_DATA_W+`P_COEFF_W+`P_DECIMATION;
  //const int SUM_W = `P_INP_DATA_W+`P_COEFF_W+`P_DECIMATION+`DIV(`P_COEFF_L, `P_DECIMATION);
  
  int ppd_mul_matrix[][];
  int ppd_add_matrix[][];
  int z;
  reg [`MUL_W*`ROW*`COL-1:0] dbg_mul;
  reg [`ADD_W*`ROW*`COL-1:0] dbg_add;
 // const int ROW = `P_DECIMATION;
  
  initial
    begin
      $display("PPD coefficient length \t\t\t= %2d", `P_COEFF_L);
      $display("PPD coefficient matrix [row][col] \t= [%2d][%2d]", `ROW, `COL);
      $display("PPD multiplier output width \t\t= %2d", `MUL_W);
      $display("PPD adder output width \t\t\t= %2d", `ADD_W);
      
      assign dbg_mul = dut.ppd_mul_add.w_mul;
      assign dbg_add = dut.ppd_mul_add.w_add_tree;
      
      ppd_mul_matrix = new[`ROW];
      foreach(ppd_mul_matrix[i]) ppd_mul_matrix[i] = new[`COL];
      
      ppd_add_matrix = new[`ROW];
      foreach(ppd_add_matrix[i]) ppd_add_matrix[i] = new[`COL];      
    end
  
  always @(negedge s_clk)
    begin
      z=0;
      for (int i = 0; i < `COL; i++) begin
        for (int j = 0; j < `ROW; j++) begin
          ppd_mul_matrix[j][i] = $signed(dbg_mul[z*`MUL_W +: `MUL_W]);
          z++;           
          $write(" MUL:: ",ppd_mul_matrix[j][i]);
        end
	$display("\n");
      end 
    end

